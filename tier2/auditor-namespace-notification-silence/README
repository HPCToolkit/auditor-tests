# Auditor namespaces (undocumentedly) differ from normal namespaces

The separate namespace used to load an auditor behaves very differently from a "normal" namespace created by the application,
however there is no indication in the auditor callbacks that a namespace falls into this "special" case. Since LD_AUDIT can
load auditors arbitrarily *all* auditors must be robust against the idiosyncrasies of auditor namespaces, complicating already
delicate auditor code.

The following differences have been found between auditor namespaces and application namespaces:
 - After the initial loading of an auditor and its direct dependencies (i.e. after the first la_activity(CONSISTENT)), no other
   la_obj* or la_activity callbacks will be issued for the auditor's namespace. This prevents auditors from observing every
   binary loaded into the address space by the linker.
 - la_symbind is not called for PLT lookups from an auditor, but confusingly still is for dlsym lookups. These la_symbind
   calls reference binaries that have not been the subject of a prior la_objopen notification.
 - The Lmid_t passed to la_objopen for auditor namespaces does not clearly differ from those generated during dlmopen(LM_ID_NEWLM).
   In the latter case the auditor is able to load additional libraries into an application namespace using dlmopen by passing
   this Lmid_t, in the former case the dlmopen crashes uncatchably.

Without a clear distinction between auditor namespaces and application namespaces, auditors must defensively presume all namespaces
will have these idiosyncrasies. While removing these differences may solve these issues, auditors would then have the ablity to inject
code into other auditors which would expose a host of issues caused by the tangled "in-fighting" of cross-namespace calls. To prevent
further issues, the proposed solution is to specifically prevent the problematic "edit" operations while allowing all other "read-only"
notifications and operations to proceed unabated.

Within the auditor interface, only the following "edit" operations are available:
 - la_objsearch can alter the name/path used to search for a binary. This can be used to "swap out" libraries for interception.
 - la_objopen is passed an Lmid_t which can be passed to dlmopen to load new libraries in a namespace. This can be used to alter
   init constructor orders, call functions within the namespace, or in combination with RTLD_GLOBAL intercept symbols.
 - la_symbind can alter the function pointer used for symbol binding. This can be used to intercept symbols.
 - la_plt* can alter the arguments and return of a symbol, as well as the function called internally. This can be used to intercept
   or otherwise wrap symbols.

The proposed solution is to prevent these "edit" operations specifically, while retaining all other notifications. In detail, the
proposed extension is that auditor namespaces should behave identically to application namespaces with the following exceptions:
 1. The return value of la_objsearch is ignored when the destination namespace is an auditor namespace, as if the call returned the
    original binary name. A new bit LA_SER_FINAL should be set in flag to indicate that the return value will be ignored.
 2. The Lmid_t passed to la_objopen for binaries in an auditor namespace should be a new constant LM_ID_READONLY, to indicate that
    the namespace cannot be appended to by dlmopen. dlmopen should consider this constant an invalid namespace and error, and
    this constant should never be the Lmid_t of a valid application namespace.
 3. The return value of la_symbind should be ignored when the referencing binary is in an auditor namespace, as if the call returned
    the original symbol value. A new bit LA_SYMB_FINAL should be set in flags to indicate that the return value will be ignored.
 4. la_plt* should never be called when the referencing binary is in an auditor namespace, as if the la_symbind before it set
    LA_SYMB_NOPLT* in flags.

### Bug reproducer
git clone https://github.com/hpctoolkit/auditor-tests
cd auditor-tests/tier2/auditor-namespace-notification-silence
make
